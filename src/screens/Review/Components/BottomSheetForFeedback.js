import React, {useState} from 'react';
import {
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  View,
  Dimensions,
  FlatList,
  Text,
  TextInput,
  Button,
  ToastAndroid,
} from 'react-native';
import { Chip, CheckBox } from 'react-native-elements';
import {BottomSheet} from 'react-native-elements';
import Close from '../../../assets/Close';

const WIDTH = Dimensions.get('screen').width;
const BottomSheetForFeedback = ({
  bottomSheetVisible,
  setBottomSheetVisible,
}) => {
  // State for the text area
  const [reviewText, setReviewText] = useState('');
  
  // State for Chips (Reasons for review)
  const chipTitles = [
    "Question",
    "Wrong Answer",
    "Wrong Explanation",
    "Question Ambiguity",
    "None of the Above"
  ];
  const [selectedChips, setSelectedChips] = useState([]);

  // State for Checkboxes
  const [category, setCategory] = useState({ cet: false, neet: false, both: false });

  // State for Rating
  const ratingLabels = ["Very Easy", "Easy", "Moderate", "Difficult", "Very Difficult"];
  const [rating, setRating] = useState(null);

  // Handle Chip selection for reasons
  const toggleChip = (title) => {
    if (selectedChips.includes(title)) {
      setSelectedChips(selectedChips.filter(chip => chip !== title));
    } else {
      setSelectedChips([...selectedChips, title]);
    }
  };

  // Handle Rating Chip selection
  const handleRatingSelect = (index) => {
    setRating(index + 1);
  };

  // Handle Submit
  const handleSubmit = () => {
    if (!reviewText.trim()) {
      ToastAndroid.show("Review cannot be empty!", ToastAndroid.SHORT);
      return;
    }
    ToastAndroid.show("Review submitted successfully!", ToastAndroid.SHORT);
    setReviewText('');
    setSelectedChips([]);
    setCategory({ cet: false, neet: false, both: false });
    setRating(null);
  };

  return (
    <BottomSheet
      isVisible={bottomSheetVisible}
      containerStyle={styles.bottomSheetContainer}
      onBackdropPress={() => setBottomSheetVisible(false)} // Close bottom sheet when clicking outside
    >
      <View
        style={{
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-between',
          alignItems: 'center',
          margin: 10,
        }}>
        <Text style={styles.label}>Your Review</Text>
        <TouchableOpacity
          style={{
            width: 25,
            height: 25,
            backgroundColor: '#efefef',
            elevation: 5,
            borderRadius: 10,
            margin: '2%',
          }}
          onPress={() => setBottomSheetVisible(!bottomSheetVisible)}>
          <Close />
        </TouchableOpacity>
      </View>

      {/* <View style={{width: WIDTH * 0.95}}> */}
      <View style={styles.container}>
        {/* Text Area */}

        <TextInput
          style={styles.textArea}
          placeholder="Write your review here..."
          value={reviewText}
          onChangeText={setReviewText}
          multiline
        />
        <Button title="Submit" onPress={handleSubmit} />

        {/* Chips for reasons */}
        <Text style={styles.label}>Select Reason for Review:</Text>
        <View style={styles.chipContainer}>
        {chipTitles.map(title => (
          <Chip
            key={title}
            title={title}
            type="solid"
            onPress={() => toggleChip(title)}
            buttonStyle={selectedChips.includes(title) ? styles.chipSelected : styles.chip}
          />
        ))}
      </View>
        {/* Checkboxes for categories */}
        <Text style={styles.label}>Select Category:</Text>
      <CheckBox
        title="CET"
        checked={category.cet}
        onPress={() => setCategory(prev => ({ ...prev, cet: !prev.cet }))}
        containerStyle={styles.checkboxContainer}
      />
      <CheckBox
        title="NEET"
        checked={category.neet}
        onPress={() => setCategory(prev => ({ ...prev, neet: !prev.neet }))}
        containerStyle={styles.checkboxContainer}
      />
      <CheckBox
        title="Both"
        checked={category.both}
        onPress={() => setCategory(prev => ({ ...prev, both: !prev.both }))}
        containerStyle={styles.checkboxContainer}
      />
          
        </View>

        <Text style={styles.infoText}>Question Suggested Category</Text>
      <Text style={styles.infoText}>Question Type</Text>
      <Text style={styles.infoText}>Question Generated By</Text>

      {/* Rating Chips */}
      <Text style={styles.label}>Rate the Question:</Text>
      <View style={styles.ratingContainer}>
        {ratingLabels.map((label, index) => (
          <Chip
            key={label}
            title={`${index + 1} - ${label}`}
            type="solid"
            onPress={() => handleRatingSelect(index)}
            buttonStyle={rating === index + 1 ? styles.chipSelected : styles.chip}
          />
        ))}
      </View>
        
      {/* </View> */}
    </BottomSheet>
  );
};
const styles = StyleSheet.create({
  box: {
    fontSize: 20,
    color: '#101828',
    textAlign: 'center',
    marginVertical: 8,
  },
  bottomSheetContainer: {
    position: 'absolute',
    bottom: 0,
    borderTopLeftRadius: 25,
    borderTopRightRadius: 25,
    height: '85%', // Decreased height
    width: '100%',
    backgroundColor: 'white',
    alignItems: 'center',
    elevation: 8,
  },

  modalBtn: {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'flex-start',
    justifyContent: 'flex-start',
    height: 50,
    padding: 10,
    gap: 20,
  },
  modalBtnTxt: {fontSize: 16},
  modalBtnView: {
    width: '100%',
    height: 1,
    backgroundColor: '#f3f3f3',
  },
  container: {
    padding: 16,
    flex: 1,margin:10
  },
  label: {
    fontSize: 16,
    fontWeight: 'bold',
    margin: 10,
  },
  textArea: {
    height: 100,
    borderColor: '#cccccc',
    borderWidth: 1,
    borderRadius: 8,
    padding: 8,
    backgroundColor: '#ffffff',
    marginBottom: 10,
  },
  chipContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  chip: {
    backgroundColor: '#e0e0e0',
    margin: 4,
  },
  chipSelected: {
    backgroundColor: '#1976d2',
    margin: 4,
  },
  checkboxContainer: {
    backgroundColor: 'transparent',
    borderWidth: 0,
    padding: 0,
  },
  infoText: {
    fontSize: 14,
    color: '#333',
    margin: 10,
  },
  ratingContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    margin: 10,
  },
});
export default BottomSheetForFeedback;
